/*
 Copyright 2020 The Knative Authors

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/
// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/kubernetes/scheme"
	"k8s.io/client-go/rest"
)

// KuberhealthyChecksGetter has a method to return a KuberhealthyCheckInterface.
// A group's client should implement this interface.
type KuberhealthyChecksGetter interface {
	KuberhealthyChecks(namespace string) KuberhealthyCheckInterface
}

// KuberhealthyCheckInterface has methods to work with KuberhealthyCheck resources.
type KuberhealthyCheckInterface interface {
	Create(*KuberhealthyCheck) (KuberhealthyCheck, error)
	Update(*KuberhealthyCheck) (KuberhealthyCheck, error)
	Delete(name string, options *metav1.DeleteOptions) error
	DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error
	Get(name string, options metav1.GetOptions) (KuberhealthyCheck, error)
	List(opts metav1.ListOptions) (KuberhealthyCheckList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result KuberhealthyCheck, err error)
}

// kuberhealthyChecks implements KuberhealthyCheckInterface
type kuberhealthyChecks struct {
	client rest.Interface
	ns     string
}

// newKuberhealthyChecks returns a KuberhealthyChecks
func newKuberhealthyChecks(c *KHCheckV1Client, namespace string) *kuberhealthyChecks {
	return &kuberhealthyChecks{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the kuberhealthyCheck, and returns the corresponding kuberhealthyCheck object, and an error if there is any.
func (c *kuberhealthyChecks) Get(name string, options metav1.GetOptions) (result KuberhealthyCheck, err error) {
	result = KuberhealthyCheck{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("khchecks").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(context.TODO()).
		Into(&result)
	return
}

// List takes label and field selectors, and returns the list of KuberhealthyChecks that match those selectors.
func (c *kuberhealthyChecks) List(opts metav1.ListOptions) (result KuberhealthyCheckList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = KuberhealthyCheckList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("khchecks").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(context.TODO()).
		Into(&result)
	return
}

// Watch returns a watch.Interface that watches the requested kuberhealthyChecks.
func (c *kuberhealthyChecks) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("khchecks").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(context.TODO())
}

// Create takes the representation of a kuberhealthyCheck and creates it.  Returns the server's representation of the kuberhealthyCheck, and an error, if there is any.
func (c *kuberhealthyChecks) Create(kuberhealthyCheck *KuberhealthyCheck) (result KuberhealthyCheck, err error) {
	result = KuberhealthyCheck{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("khchecks").
		Body(kuberhealthyCheck).
		Do(context.TODO()).
		Into(&result)
	return
}

// Update takes the representation of a kuberhealthyCheck and updates it. Returns the server's representation of the kuberhealthyCheck, and an error, if there is any.
func (c *kuberhealthyChecks) Update(kuberhealthyCheck *KuberhealthyCheck) (result KuberhealthyCheck, err error) {
	result = KuberhealthyCheck{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("khchecks").
		Name(kuberhealthyCheck.Name).
		Body(kuberhealthyCheck).
		Do(context.TODO()).
		Into(&result)
	return
}

// Delete takes name of the kuberhealthyCheck and deletes it. Returns an error if one occurs.
func (c *kuberhealthyChecks) Delete(name string, options *metav1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("khchecks").
		Name(name).
		Body(options).
		Do(context.TODO()).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *kuberhealthyChecks) DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("khchecks").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do(context.TODO()).
		Error()
}

// Patch applies the patch and returns the patched kuberhealthyCheck.
func (c *kuberhealthyChecks) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result KuberhealthyCheck, err error) {
	result = KuberhealthyCheck{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("khchecks").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do(context.TODO()).
		Into(&result)
	return
}
