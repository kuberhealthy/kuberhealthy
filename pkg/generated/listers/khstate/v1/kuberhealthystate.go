// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/kuberhealthy/kuberhealthy/v2/pkg/apis/khstate/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KuberhealthyStateLister helps list KuberhealthyStates.
// All objects returned here must be treated as read-only.
type KuberhealthyStateLister interface {
	// List lists all KuberhealthyStates in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.KuberhealthyState, err error)
	// KuberhealthyStates returns an object that can list and get KuberhealthyStates.
	KuberhealthyStates(namespace string) KuberhealthyStateNamespaceLister
	KuberhealthyStateListerExpansion
}

// kuberhealthyStateLister implements the KuberhealthyStateLister interface.
type kuberhealthyStateLister struct {
	indexer cache.Indexer
}

// NewKuberhealthyStateLister returns a new KuberhealthyStateLister.
func NewKuberhealthyStateLister(indexer cache.Indexer) KuberhealthyStateLister {
	return &kuberhealthyStateLister{indexer: indexer}
}

// List lists all KuberhealthyStates in the indexer.
func (s *kuberhealthyStateLister) List(selector labels.Selector) (ret []*v1.KuberhealthyState, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.KuberhealthyState))
	})
	return ret, err
}

// KuberhealthyStates returns an object that can list and get KuberhealthyStates.
func (s *kuberhealthyStateLister) KuberhealthyStates(namespace string) KuberhealthyStateNamespaceLister {
	return kuberhealthyStateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KuberhealthyStateNamespaceLister helps list and get KuberhealthyStates.
// All objects returned here must be treated as read-only.
type KuberhealthyStateNamespaceLister interface {
	// List lists all KuberhealthyStates in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.KuberhealthyState, err error)
	// Get retrieves the KuberhealthyState from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.KuberhealthyState, error)
	KuberhealthyStateNamespaceListerExpansion
}

// kuberhealthyStateNamespaceLister implements the KuberhealthyStateNamespaceLister
// interface.
type kuberhealthyStateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KuberhealthyStates in the indexer for a given namespace.
func (s kuberhealthyStateNamespaceLister) List(selector labels.Selector) (ret []*v1.KuberhealthyState, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.KuberhealthyState))
	})
	return ret, err
}

// Get retrieves the KuberhealthyState from the indexer for a given namespace and name.
func (s kuberhealthyStateNamespaceLister) Get(name string) (*v1.KuberhealthyState, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("kuberhealthystate"), name)
	}
	return obj.(*v1.KuberhealthyState), nil
}
