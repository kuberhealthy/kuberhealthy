# Default values for kuberhealthy.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

prometheus:
  enabled: false
  name: "prometheus"
  release: prometheus-operator

  serviceMonitor:
    enabled: false
    endpoints:
      interval: 15s
      bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token

  enableAlerting: false

# imageRegistry can be used to globally override where check images are pulled from. Individual checks can be overridden below. 
# By default if no overrides are specified, all images are pulled from Docker Hub.  Do not include a trailing '/'.
imageRegistry: {}

image:
  repository: kuberhealthy/kuberhealthy
  tag: v2.3.1

resources:
  requests:
    cpu: 400m
    memory: 300Mi
  limits:
    cpu: 2
    memory: 1Gi

## Only minAvailable or maxUnavailable can be set at the same time.
podDisruptionBudget:
  enabled: true
  minAvailable: 1
  maxUnavailable:


tolerations:
  # change to true to tolerate and deploy to masters
  master: false

deployment:
  replicas: 2
  maxSurge: 0
  maxUnavailable: 1
  imagePullPolicy: IfNotPresent
  nodeSelector: {}
  podAnnotations: {}
  # tolerations:
  # - key: "key"
  #   operator: "Equal"
  #   value: "value"
  #   effect: "NoSchedule"
  env: {}
  command:
  - /app/kuberhealthy
  # args:
  # priorityClassName:

# When enabled equals to true, runAsUser and fsGroup will be
# included to all khchecks as specified below.
securityContext:
  enabled: true # if enabled is set to false, securityContext settings will not be applied at all in checker pod custom resources
  runAsNonRoot: true
  runAsUser: 999
  fsGroup: 999
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true

# When enabled kuberhealthy will create a PodSecurityPolicy, Role and Binding to match the specified securityContext
# In case you use your own images for tests, you might need to add other PSPs as well on your own
podSecurityPolicy:
  enabled: false

# Please remember that changing the service type to LoadBalancer
# will expose Kuberhealthy to the internet, which could cause
# error messages shown by Kuberhealthy to be exposed to the
# public internet.  It is recommended to create the service
# with ClusterIP, then to manually edit the service in order to
# securely expose the port in an appropriate way for your
# specific environment.
service:
  externalPort: 80
  type: ClusterIP
  annotations: {}

check:
  daemonset:
    # leave blank for the default service account name
    serviceAccountName:
    enabled: true
    runInterval: 15m
    timeout: 12m
    image:
      registry: {}
      repository: kuberhealthy/daemonset-check
      tag: v3.2.3
    extraEnvs:
    nodeSelector: {}
    tolerations:
    #- key: "key"
    #  operator: "Equal"
    #  value: "value"
    #  effect: "NoSchedule"
    resources:
      requests:
        cpu: 10m
        memory: 50Mi    
  deployment:
    enabled: true
    runInterval: 10m
    timeout: 15m
    image:
      registry: {}
      repository: kuberhealthy/deployment-check
      tag: v1.7.1
    extraEnvs:
      CHECK_DEPLOYMENT_REPLICAS: "4"
      CHECK_DEPLOYMENT_ROLLING_UPDATE: "true"
      CHECK_SERVICE_ACCOUNT: "default"
    nodeSelector: {}
    tolerations: 
    #- key: "key"
    #  operator: "Equal"
    #  value: "value"
    #  effect: "NoSchedule"
  dnsInternal:
    enabled: true
    runInterval: 2m
    timeout: 15m
    image:
      registry: {}
      repository: kuberhealthy/dns-resolution-check
      tag: v1.4.2
    extraEnvs:
      HOSTNAME: "kubernetes.default"
    nodeSelector: {}
    tolerations: 
    #- key: "key"
    #  operator: "Equal"
    #  value: "value"
    #  effect: "NoSchedule"
  dnsExternal:
    enabled: false
    runInterval: 2m
    timeout: 15m
    image:
      registry: {}
      repository: kuberhealthy/dns-resolution-check
      tag: v1.4.2
    extraEnvs:
      HOSTNAME: "google.com"
    nodeSelector: {}
    tolerations: 
    #- key: "key"
    #  operator: "Equal"
    #  value: "value"
    #  effect: "NoSchedule"
  podRestarts:
    enabled: false
    runInterval: 5m
    timeout: 10m
    image:
      registry: {}
      repository: kuberhealthy/pod-restarts-check
      tag: v2.3.1
    extraEnvs:
      MAX_FAILURES_ALLOWED: "10"
    nodeSelector: {}
    tolerations: []
    #- key: "key"
    #  operator: "Equal"
    #  value: "value"
    #  effect: "NoSchedule"
  podStatus:
    enabled: false
    runInterval: 5m
    timeout: 15m
    image:
      registry: {}
      repository: kuberhealthy/pod-status-check
      tag: v1.2.3
    allNamespaces: false
    extraEnvs:
    nodeSelector: {}
    tolerations: []
    #- key: "key"
    #  operator: "Equal"
    #  value: "value"
    #  effect: "NoSchedule"
  storage:
  # external check from registry
  # https://github.com/ChrisHirsch/kuberhealthy-storage-check
    enabled: false
    # empty string indicate default storage class
    # kubectl get storageclass
    # or put storage class names into list
    storageClass: [""]
    runInterval: 5m
    timeout: 10m
    image:
      repository: chrishirsch/kuberhealthy-storage-check
      tag: v0.0.1
    extraEnvs:
      CHECK_STORAGE_IMAGE: bitnami/nginx:1.19
      CHECK_STORAGE_INIT_IMAGE: bitnami/nginx:1.19
    nodeSelector: {}
    tolerations: []
    #- key: "key"
    #  operator: "Equal"
    #  value: "value"
    #  effect: "NoSchedule"
  networkConnection:
    enabled: false
    runInterval: 30m
    timeout: 10m
    image:
      registry: {}
      repository: kuberhealthy/network-connection-check
      tag: v0.1.2
    extraEnvs:
      CONNECTION_TARGET: "tcp://github.com:443"
    nodeSelector: {}
    tolerations: []
    #- key: "key"
    #  operator: "Equal"
    #  value: "value"
    #  effect: "NoSchedule"

checkReaper:
  enabled: true # Don't disable checkReaper, this flag exist to make e2e tests easier.
  image:
    registry: {}
    repository: kuberhealthy/check-reaper
    tag: v1.5.0
  nodeSelector: {}
  tolerations: []
    #- key: "key"
    #  operator: "Equal"
    #  value: "value"
    #  effect: "NoSchedule"
  # startingDeadlineSeconds:
